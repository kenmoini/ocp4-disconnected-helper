---
# Prerequisites:
## Modify the inventory file to reflect your environment
## The user must have password-less sudo access
## The user must have password-less ssh access to the remote hosts

- name: Install Harbor Container Registry to RHEL
  hosts: harbor
  become: true
  tasks:
    - name: Install needed packages
      ansible.builtin.package:
        name: "{{ packages }}"
        state: present

    - name: Enable and start cockpit
      ansible.builtin.service:
        name: cockpit.socket
        state: started
        enabled: true

    - name: Enable and start firewalld
      ansible.builtin.service:
        name: firewalld
        state: started
        enabled: true

    - name: Enable services for harbor
      ansible.posix.firewalld:
        service: "{{ item }}"
        permanent: true
        state: enabled
        immediate: true
      with_items:
        - http
        - https

    - name: Enable services for harbor
      ansible.posix.firewalld:
        port: "4443/tcp"
        permanent: true
        state: enabled
        immediate: true

    - name: Add Docker repo
      ansible.builtin.shell: yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      args:
        creates: /etc/yum.repos.d/docker-ce.repo

    - name: Install Docker
      ansible.builtin.package:
        name: "{{ docker_packages }}"
        state: present

    - name: Enable and start Docker
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

    - name: Create the service drop in directory for docker and populate proxy data
      when: proxy is defined
      block:
        - name: Create the directory
          ansible.builtin.file:
            path: /etc/systemd/system/docker.service.d
            state: directory
            mode: 0755

        - name: Create the drop in file
          ansible.builtin.template:
            src: docker-proxy.conf.j2
            dest: /etc/systemd/system/docker.service.d/proxy.conf
            mode: 0644
          register: drop_in_file

        - name: Reload the systemd daemon
          when: drop_in_file is changed
          ansible.builtin.systemd:
            daemon_reload: true

        - name: Restart docker
          when: drop_in_file is changed
          ansible.builtin.service:
            name: docker
            state: restarted

    - name: Create the certificate directory
      ansible.builtin.file:
        path: /etc/docker/certs.d/{{ harbor_hostname }}:443
        state: directory
        mode: 0755

    - name: Create the Harbor Certificate file
      ansible.builtin.copy:
        content: "{{ ssl_certificate }}"
        dest: /etc/docker/certs.d/{{ harbor_hostname }}:443/{{ harbor_hostname }}.cert
        mode: 0644

    - name: Create the Harbor Certificate key file
      ansible.builtin.copy:
        content: "{{ ssl_certificate_key }}"
        dest: /etc/docker/certs.d/{{ harbor_hostname }}:443/{{ harbor_hostname }}.key
        mode: 0644

    - name: Download the Harbor offline installation package without proxy settings
      when: proxy is not defined
      ansible.builtin.get_url:
        url: https://github.com/goharbor/harbor/releases/download/{{ harbor_version }}/harbor-offline-installer-{{ harbor_version }}.tgz
        dest: /opt/harbor-offline-installer-{{ harbor_version }}.tgz
        mode: 0644

    - name: Download the Harbor offline installation package
      ansible.builtin.get_url:
        url: https://github.com/goharbor/harbor/releases/download/{{ harbor_version }}/harbor-offline-installer-{{ harbor_version }}.tgz
        dest: /opt/harbor-offline-installer-{{ harbor_version }}.tgz
        mode: 0644
      when: proxy is defined
      environment:
        http_proxy: "{{ proxy.http_proxy | default(omit) }}"
        https_proxy: "{{ proxy.https_proxy | default(omit) }}"
        no_proxy: "{{ proxy.no_proxy | default(omit) }}"

    - name: Create the Harbor installation directory
      ansible.builtin.file:
        path: /opt/harbor
        state: directory
        mode: 0755

    - name: Extract the Harbor offline installation package
      ansible.builtin.unarchive:
        src: /opt/harbor-offline-installer-{{ harbor_version }}.tgz
        dest: /opt
        remote_src: true

    - name: Template the Harbor configuration
      ansible.builtin.template:
        src: harbor.yml.j2
        dest: /opt/harbor/harbor.yml
        mode: 0644

    - name: See if the container stack is running
      ansible.builtin.shell: docker compose ls --filter name=harbor -q | grep harbor | wc -l
      register: stack_ls_out
      ignore_errors: true
      changed_when: false

    - name: Stop the container stack if it is running
      ansible.builtin.shell: docker compose down -v
      when: stack_ls_out.stdout != "0"
      args:
        chdir: /opt/harbor

    - name: Run the preparation script
      ansible.builtin.shell: ./prepare
      args:
        chdir: /opt/harbor
      register: prepare_r_out

    - name: Run the installation/start script
      ansible.builtin.shell: ./install.sh
      args:
        chdir: /opt/harbor
      register: install_r_out
